The Modbus Client module is a very powerful Protocol communication
module. It is capable of Modbus TCP Client and Server as well as Modbus
RTU Master and Slave.

The basic functional unit of the Modbus module is the _port_. A port is
associated with a single communication mechanism. Either a TCP socket or
a serial port. The port can be configured as either a Master/Client or a
Server/Slave. Multiple ports can be configured so that many serial ports
can be used or Multiple servers can be each assigned a different IP
address or port number. There is no arbitrary limit on the number of
ports that can be configured.

When a port is configured as a master or a client, a list of commands
can be configured that will be sent periodically to access the data in
the server or slave node. A tag can be created as well that allows other
modules in the system to manually send a Modbus request on the port.

When the port is configured as a server or slave, tags are set up that
represent the different register tables (holding, inputs, etc). These
tags would either be arrays of bits in the case of inputs and coils or
16 bit integers in the case of holding registers or analog inputs.
Multiple sets of these register tags can be configured so that multiple
nodes or units can be represented with different sets of registers. If a
register is not defined for a specific unit or node then requests to
access those registers will cause unknown function code errors to be
returned to the master/client.

There are also hooks in the server/slave ports that call Lua functions
at certain points in the communication. This allows the user to
intercept a message and return errors or modify the data on the fly or
write tags to synchronize logic with Modbus requests.

=== Configuration

Example configuration files are given in the source code and are pretty
self-explanatory. Essentially, the idea is that one or more ports are
created, and then the port id that is returned from the `add_port()`
function is used to assign register definitions or commands to that
port, depending on the type of port (master/client vs. slave/server).

If the port is configured as a server or a slave then registers will
have to be set up. The daxmodbus module can act as multiple nodes or
units if configured. Adding a register basically assigns a Dax tag to a
particular node/register. For example you could assign the tag
_mb_holding_ to be the holding register for node 1. Then all holding
register communications will be reflected in _mb_holding_.

Each node can be assigned one tag for each register that is understood
by Modbus. One each of the following... Coils, Discrete Inputs, Holding
Registers and Analog Input Registers.

If the port is configured as a master or client then commands may have
to be set up. Each command can be set to one of three modes, CONTINUOUS,
CHANGE or TRIGGER. Each command can be individually enabled or disabled.
The start up state is given by the `.enable` member of the command table
in the configuration file. After that the command can be enabled by
setting the corresponding bit in the tag that is created. This tag will
be named [port name]_cmd_en, and is an array of BOOLs that each
correspond to the commands in the order in which they were added in the
configuration file.

If the command is set to CONTINUOUS then it will be sent at some
multiple of the ports scantime. This multiple is given by the .interval
member of the command table. For example, if the scantime on the port is
set to 500 mS and the interval for a command is set to 3, that command
will be sent every 1.5 seconds.

If the command is set to CHANGE then it will be sent when the data tag
that is associated with it changes. This is only applicable for function
codes that write data. TRIGGER is the mode that uses a tag to trigger
the sending of the command. This allows other logic in the system to
decide when to send a command.
