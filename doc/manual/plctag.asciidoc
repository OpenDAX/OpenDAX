The PLCTag Client module utilizes the _libplctag_ library for reading
and writing tags to various PLCs.

PLC tags are defined in the plctag.conf configuration file and are
associated with OpenDAX tags. The PLCs are polled for their respective
tags at intervals that are configured in the configuration file and
updated in the OpenDAX tag server.

=== Configuration

....
-- Tag definitions are a table that will be passed to
-- the add_plctag() function later.  The name is
-- arbitrary.   We use tag here but you can use any
-- valid Lua identifier
tag = {}

-- daxtag and count define the tag in the OpenDAX tag server
tag.daxtag = "TestUINT" -- Name of the tag in OpenDAX.
tag.count = 5  -- Number of elements in the above tag

-- elem_size overrides the size of the element in the PLC.
tag.elem_size = 4

-- Used for rearranging bytes when access to PLC tags is raw
tag.raw_byte_map = {1, 0, 3, 2}

-- plctag is the attribute definition of the PLC tag that defines the
-- tag in the libplctag library.  See the libplctag documentation for
-- a complete description.

-- tag.plctag = "protocol=ab-eip&gateway=172.16.4.1&path=1,1&
--               cpu=LGX&elem_count=10&name=TestDINT"
tag.plctag = "protocol=modbus_tcp&gateway=127.0.0.1&path=1&
              elem_size=4&elem_count=10&name=hr0"


tag.read_update = 1000  -- amount of time between reads from the PLC
tag.write_update = 500  -- amount of time between writes to the PLC

-- Finally we create the tag in the module configuration
add_plctag(tag)
....

The main configuration of the PLCTag module is based around the
definition of ’tags.’ This can be a little confusing since we use the
name _tag_ as the definition of a single unit of data within OpenDAX.
Here we differentiate between a _PLC tag_ and an OpenDAX _tag_.

Tags are defined in the configuration with a table that uses strings as
the index. This table is set up and then passed to `add_tag()`
configuration function. The table can then be reused or another table
can be defined.

A PLC tag is defined with a URL like string that defines the tag for the
libplctag library. OpenDAX simply passes this string to the libplctag
library. See the libplctag documentation at...

`https://github.com/libplctag/libplctag/wiki/Tag-String-Attributes`

This string is configured by setting the `plctag` member of the tag
table in the Lua configuration file.

The OpenDAX tag is defined with the `daxtag` member of the tag table.
The PLCTag module does not create this tag. It can be created in an
`init_hook()` function or in another module. The tag need not exist when
the PLCTag module first starts but errors will be generated in the log
each time the module tries to write the tag to the tagserver, until the
tag is created.

The `count` member defines the number of items in the tag we will use.
This count is the number of items that we will try to read from the PLC
Tag, regardless of how many elements the PLCTag represents.

The `elem_size` member defines the assumed element size of the PLC tag.
If this is not present or set to zero then the actual element size will
be determined from the libplctag library. This can be overridden to make
it possible for the tag in OpenDAX to be larger than the tag in the PLC.
One use for this would be in the case where a 32 bit floating point
number is being represented with two consecutive 16 bit numbers in the
PLC. In this case the element size can be overridden to 4 and this will
work as expected.

The `raw_byte_map` member is an optional definition of the requested
byte ordering when the conversion is done raw. `elem_size` must be
defined for this to work and the byte mapping array will be set equal to
the element size and either truncated if too large or filled in with
values equal to the index. The value being the same as the index has the
same effect as no byte mapping at all. Each number in the byte map array
represents the byte in the PLC buffer that will be written into the byte
of the OpenDAX tag buffer for that place in the array. For example if
the data that is read from the plc is 11, 22, 33, 44 and the byte map
array is 1,0,3,2 then the data that will be written to the OpenDAX tag
buffer will be 22, 11, 44, 33.

The `read_update` member defines the read polling time for the tag in
milliseconds. The libplctag library will poll this tag at that rate and
when the tag is read it will be written to the OpenDAX tag server.

The `write_update` member defines the rate in which the writes to the
PLC will happen. When defined tags change in the tag server an event is
generated in the PLCTag module. The write is queued in the libplctag
library and will be written to the PLC at the expiration of the
write_update time. This allows multiple values to be written to the PLC
at once. This can make the communication to the PLC much more efficient
since many PLC allow grouping of data in messages, like writing multiple
registers in .

=== Detailed Description

Tags are mapped according to a couple of criteria. The tag data is read
into a buffer within libplctag and then are translated into the proper
data type for OpenDAX. The conversion is based on the data type of the
OpenDAX tag. If the OpenDAX tag is a INT (16 bit signed integer) and the
PLC tag is of type DINT (32 bit signed integer) the conversion will work
as expected as long as the value in the PLC is less than or equal to
65536. At that point the the value will roll over. This is the case for
single tags. If the tags are arrays then it gets more confusing.

The array of data is still read into the libplctag library as a whole
and is represented as a buffer of bytes. The conversion will still take
place based on the size of the OpenDAX tag but the offset into the PLC
tag buffer will be based on the element size. This element size is
determined by the PLC tag definition in the library and may be dependent
on the type of PLC as well as the type of tag. If the number of elements
in the tag and the _count_ of the OpenDAX tag are the same and the data
types are the same then there is no issue.

If the size of the OpenDAX tag is greater than the element size of the
PLC tag then the element size can be overridden in the configuration.
This would allow us to have 8 32 bit floating point numbers represented
in the PLC as 16 16 bit integers or 32 8 bit bytes. The element count in
the `plctag` configuration would need to be set appropriately for this
to work correctly.

As an example, let’s say that we want to read 8 REAL (32 bit floats)
into OpenDAX from a PLC. The floats are stored in the modbus PLC as 16
consecutive registers in the holding register block. We would configure
the `plctag` member of the configuration to read these 16 registers and
we’d configure the `daxtag` and `count` members as the name of a REAL
tag in OpenDAX with a count of 8. Then since the normal element size
would normally be 2 for the PLC we’ll have override this with a value of
4. This would work as we expect.

The conversion is always done with the type found in the OpenDAX tag,
and is carried out based on the count found in the OpenDAX tag. If the
count is left off it will be set to 1.

If the OpenDAX tag is a _Custom Data Type_ (CDT) then no data type
conversions will be done and the data will be simply copied byte by
byte. If the OpenDAX tag is a CDT and the PLC tag is a ControlLogix UDT
and they are structured correctly then it should work. Testing should be
done since the way PLCs pack structured data and the way OpenDAX packs
structured data may not be the same. ControlLogix PLCs pack consecutive
booleans into a 32 bit space whereas OpenDAX packs them in 8 bit spaces.
This might mean that there needs to be ’filler’ bytes added to align the
rest of the data type. The user will have to have a good understanding
of the way these data types are structured on both ends for this to
work.

Of course, it is entirely possible to pack data into arrays of bytes in
the PLC that are represented by CDTs in OpenDAX and the reverse is also
true. Byte ordering is an issue here and we are working on a way to deal
with this problem. Byte ordering for other types works fine within
libplctag but the raw byte copy that happens for CDTs does not deal with
byte ordering properly. See the raw byte mapping feature for a way to
fix byte ordering issues in CDT conversions.

The offset into the PLC tag buffer is based on the element size and the
OpenDAX tag count. Each iteration through the OpenDAX tag the offset is
incremented by the element size. This is either the size determined by
the PLC tag when it is created or from the `elem_size` configuration if
it is given. It is important that the PLC tag buffer be the same size or
larger than the OpenDAX tag count x the element size. If not then
overruns will happen. These overruns are safe since the libplctag
library checks for this condition and doesn’t allow unsafe memory
accesses but how this data is returned is not clear for all data types.
Typically a minimum value is returned but this could change. Check the
OpenDAX log for these errors if the data you are receiving does not seem
correct.

Boolean values work as expected. If the OpenDAX tag is a BOOL then the
count given by the tag will represent bits. This will behave as expected
if the PLC tag is a single 32 bit unsigned integer and the OpenDAX tag
is an array of 32 bits. Each OpenDAX BOOL will represent each bit
position within the PLC integer.

=== Notes

When reading structured data from AB PLCs is will usually be helpful to
put padding bits and bytes in the CDT that you use in OpenDAX. If it’s
just a matter or rearranging the bytes then the byte ordering feature
can be used but sometimes it’s just easier to pad the bytes and not
worry about it.

For example, to read a timer from a ControLogix PLC the following CDT
can be used.

....
cdt_create("lgx_timer", {{"pad", "BYTE", 3},
                         {"pad2", "BOOL", 5},
                         {"DN", "BOOL", 1},
                         {"TT", "BOOL", 1},
                         {"EN", "BOOL", 1},
                         {"PRE", "DINT", 1},
                         {"ACC", "DINT", 1}})
....

You can see that we padded the beginning of the CDT with three bytes
because the AB PLC uses these internally and almost everything in
ControlLogix is aligned on 32 bit boundaries. Then we pad with 5 bits
because the three bits that we are interested in are the high order bits
in that fourth byte.

It takes some experimentation to get these correct. A good place ot
start is to watch the daxplctag module logs and pay attention to the
line where the PLC tag is created. The size of the PLC element will be
displayed. Create the OpenDAX CDT with that many bytes and do some
testing. Then adjust the CDT until the data is read properly.

If it becomes apparent that the byte ordering is wrong (usually the case
with ) then byte ordering can be used to fix it all.
