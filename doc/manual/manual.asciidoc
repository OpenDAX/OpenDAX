= OpenDAX User’s Manual
Phil Birkelbach
:revdate: August 5, 2024
:sectnums:
:toc: left


//Copyright - Phil Birkelbach All Rights Reserved



== Introduction

OpenDAX is an open source, modular, data acquisition and control system
framework. It is licensed under the GPL (GNU Public License) and
therefore is completely free to use and modify. OpenDAX is written
primarily for Linux. There should be no reason that it wouldn’t compile
on other *nix like operating systems but for now we are concentrating on
Linux.

OpenDAX could be used for anything from controlling the air conditioner
in a home to controlling an entire industrial facility. Depending on
what modules are installed and run it could be used as the firmware for
a dedicated Programable Logic Controller (PLC) or a Home Automation
system. It could loosely be compared to DCS (Distributed Control System)
or a SCADA (Supervisory Control and Data Acquisition) system. Eventually
the system would be able to scale up to a several hundred thousand tag
system. At this moment the code is far to immature to be used for
anything that required reliability but we hope to get it to that point
sooner or later. Much will depend on how many developers take up the
challenge to help work on the code.

DAX stands for Data Acquisition and eXchange. The system works by
combining a master program (opendax), a real time database server
(tagserver) a library (libdax) and set of modules. The opendax server
handles the starting, stopping and monitoring of process that make up a
particular OpenDAX system. It is actually an optional part of the
system. The user can start and stop each process manually if desired.

The tag server is the program that manages the real time data that is
used throughout the system. It could hold the temperature or pressure of
a process, the status of a switch or some command data from the Human
Interface to a logic module. Each piece of information is called a ’Tag’
Each tag can be a single value or an array of values. (Multi dimensional
arrays are not supported.) Each tag is defined as a given data type.
There are several base data types. These represent simple number types
like INT or FLOAT. It is possible to create compound data types that are
collections of the base data types and other compound data types.

The modules do all the work and communicate with the `tagserver` through
the `libdax` library. There could be modules for reading and writing to
I/O points, data logging, alarming, machine interface, and logic. The
primary interface to the tag server is the `daxc` module, which is a
command line interface module that can be used to read and write tags,
check status and do all other types of maintenance in the tag server.

There is no requirement that all of the modules have to be on the same
machine. There is also no requirement that the modules be on the machine
with the tag server. Any process that is to be started by the `opendax`
server will have to be on the same computer. Modules communicate to the
server by one of two mechanisms. Either a TCP/IP connection or a _local
domain socket_. The _local domain socket_ has the advantage of being
very fast because the operating system kernel simply copies memory from
one process to another. The disadvantage is that the module that wants
to use this communication mechanism must be on the same machine as the
tag server. If the module is on another machine then it will have to use
the TCP/IP protocol to communicate with the tag server.

The system is designed so that most of the work happens in the client
library and the modules. Since the tag server is a bottleneck for the
entire system, any work that could be offloaded to the client library
and the modules was.

== Getting Started

include::install.asciidoc[]

=== Configuration

There are two ways to pass configuration information into any given
program. The first is simply to pass command line arguments and the
second is via a configuration file. There is likely some overlap between
what options can be passed with either method but some options only make
sense for the command line (an example is the `config` option that
specifies which configuration file to use). Some options might be too
complex to put on the command line and will require a configuration
file.

If a configuration attribute is present on the command line it will take
precedence over that same attribute given in the configuration files. An
exception to this is the logging configuration. Once logging services
are added via the configuration file those services will determine how
messages are logged and anything passed on the command line will be
ignored.

The configuration system is very sophisticated. It is based on the _Lua_
scripting language. In fact all of the configuration files in the base
programs are nothing more than Lua scripts. These scripts run in the
sandbox of the program that calls them and some global data is
pre-defined to help.

Using a scripting language like Lua makes configuration very powerful.
Some of the simple things that you can do are using variables to store
commonly used values, such as a file system path or an IP address that
needs to be reused in many parts of the configuration. If there are
parts of the configuration that are common between many client modules,
that information can be stored in single files and the function
`dofile()` can be used to import that code into many configurations. A
common example of this is the message logging configuration.

Before a configuration script is executed certain ’globals’ are assigned
to the script. A very important one is the string `calling_module`. This
string contains the name of the module that is running the configuration
script. This allows for common code to be shared between different parts
of the system and simple `if` statements to be used to separate which
code will be run. The `print()` function is overridden in the
configuration script to send the given string to the message logging
facility instead of simply printing to the console. These messages will
be sent to any service that has the `CONFIG` topic configured.

Other functions and globals may be set for different modules. See the
individual module’s documentation for more information.

The default configuration file for the tagserver is `./tagserver.conf`
and the default configuration filename for the master daemon is
`./opendax.conf`. Typically the default configuration filename for a
client module is that module’s name with `.conf` extension. This can
overridden with the `-C` command line option.

== The OpenDAX Master Server

The OpenDAX Master Server is a program that manages all of the other
programs in the OpenDAX system. It can be configured to start and
monitor all of the process that are needed for any given application.

The Master Server is named `opendax`.

//Need much more work here

== The Tag Server

=== Overview

The tag server contains the central database of all the real-time data.
The entire system is centered around the tag server.

The tag server is named `tagserver` and it is very simple to run and
will typically run just fine without any configuration using the
defaults. There are only a few configuration options.

=== Configuration

.Command Line Options

* *`--configfile, -C`* - This option requires an argument that represents the configuration
file that will be read on system start. By default the file
`./tagserver.conf` will be used.

* `--version, -V` - If this option is set, the tag server will simply display version
information and exit.

* `--logtopics, -T` - This option requires an argument that is a comma delimited string
containing the topics that we wish to log. It only affects the default
logging service. If any logging services are configured in the
configuration file then this will be overridden by the newly created
logging service.

* `--verbose, -v` - This option simply sets the default logging topics to ALL. This has
the effect of passing all the messages to the default logging service.

* `--socketname, -S` - This option requires an argument that represents the filename that
will be used for the local domain socket. By default it’s
`/tmp/opendax`.

* `--serverip, -I` - The IP address that the server will listen on. Default is 0.0.0.0
which has the effect of listening on all interfaces.

* `--serverport, -P` - The TCP port that the server will bind to. Default is 7777.

* `--mod-tag-exclude, -X` - A space delimited list of module names that will be excluded from the
module tag creation feature. Useful for modules that will start and stop
often and the features of the module tag are not needed

Some of this configuration is duplicated in the configuration file. Here
is an example configuration file.

....
    -- Main configuration file for the OpenDAX tag server

    -- Configuration files that are common for all programs
    dofile(configdir .. "/log.conf")

    -- The name of the local domain socket that will be created for local
    -- client module communications
    socketname = "/tmp/opendax"

    -- The IP address and TCP port that the server will listen on
    serverip = "0.0.0.0"
    serverport = 7777

    -- Module tag exclusion list. This is a space delimited list of module names that
    -- will be excluded from the module tag feature.  This might be useful for modules
    -- that start and stop often (i.e. modules run from shell scripts) or modules that
    -- have no need of the module tag features.
    mod_tag_exclude = "daxc qdax"

    -- The minimum number of communication buffers that will be maintained
    -- in the system.  The server uses pre-allocated buffers for communication
    -- and this designates the minimum number that will be maintained.
    min_buffers = 5
....

The `dofile()` functions simply load and run the configuration scripts
that are given. This is a very powerful feature of OpenDAX
configuration. It allows for common configuration code to be reused in
many parts of the OpenDAX system. Here we are just putting all of the
message logging configurations in a separate file.

=== Detailed Description

== Modules

Modules are where all the real work gets done on an OpenDAX system. The
server is the glue that holds all the modules together but the modules
are where it all happens. The OpenDAX distribution comes with a few
included modules. They are described in this chapter. If you have
received modules from other sources you’ll have to consult the
documentation that came with that module.

=== Common Module Configuration

The module configuration file is usually named after the module. For
instance the configuration file for the _daxlua_ module is called
_daxlua.conf_. These files would contain information that is specific to
each module. The _daxlua_ configuration contains the location of the
script files to execute as an example.

There are some configuration options that are common to all modules that
are included in the distribution. Some can only be given on the command
line, others only in the configuration file.

Command Line Options

- The full path to the requested configuration file. This file will be
used in lieu of the default configuration.

- If this option is specified the default configuration directory will
be changed. The normal default configuration filename will be used (i.e.
<modulename>.conf) but it will be loaded from this directory.

- This option requires an argument that is a comma delimited string
containing the topics that we wish to log. It only affects the default
logging service. If any logging services are configured in the
configuration file then this will be overridden by the newly created
logging service.

- This option simply sets the default logging topics to ALL. This has
the effect of passing all the messages to the default logging service.

- This option requires an argument that represents the filename that
will be used for the local domain socket. By default it’s
`/tmp/opendax`.

- The IP address that the module will use for network connections.
Default it `127.0.0.1`.

- The TCP port that the module will use for network connections. Default
is 7777.

- Should be either `LOCAL` or `NETWORK`. If set to `NETWORK` a TCP
connection will be made to the tag server. Otherwise the unix domain
socket will be used. Default is `LOCAL`

- Module name. The name of the module is used for determining the
default configuration file, it’s sent to the server to identify the
module to the server and it’s passed to the modules configuration file
as the `calling_module` global variable. It’s also used in the message
logging system for some services.

- The `libdax` library maintains a cache of recently used tag
definitions so that it does not have to constantly query the server for
this information every time tags need to be accessed. The higher this
number is the less the module will have to query the server but the more
memory will be used.

- The time before a timeout error will be generated for communication
with the tag server. Other timeouts may need to be set for specific
client module communications, but this one is specifically for the
client module / tag server communications.

The following is an example of a module configuration file.

....
    -- Example module configuration file, showing the configuration
    -- options that are common to all the modules supplied with OpenDAX

    -- Configuration files that are common for all programs
    dofile(configdir .. "/log.conf")

    -- The name can be set here and it will effect the name given to the
    -- server once connected as well as any message logging services that
    -- use the module name.  Obviously the configuration file and the
    -- global variable 'calling_module' will be either the default name of
    -- the module or a name that was passed on the command line.
    name = "monkey"

    -- The name of the local domain socket that will be used to
    -- communicate with a local server
    socketname = "/tmp/opendax"

    -- The IP address and TCP port of the server
    serverip = "0.0.0.0"
    serverport = 7777

    -- When set to NETWORK the client module will use TCP/IP as the
    -- communication mechanism to the server.
    server = "LOCAL"
    --server = "NETWORK"

    -- The size of the tag cache
    cachesize = 32

    -- The server message timeout in mSec
    msgtimeout = 500
....

With the exception of the message logging configuration the command line
options will override the configuration file options.

== Command Line Client Module

The command line client module is called ’daxc’. It is useful for
debugging and examining or manipulating OpenDAX data in real time. It
can also be used for automating some OpenDAX tasks from a shell script.
It can be run interactively, it can read input from STDIN or a filename
can be passed to it that has lists of `daxc` commands to execute.

=== Configuration

There is very little configuration that needs to be done to the `daxc`
module. The general configuration that is needed for all modules such as
server address, ports etc are all that is really required. There are a
few command line options that are specific to the `daxc` module.

There is no configuration file for `daxc`. All of the configuration is
passed on the command line.

....
    Usage:
    $ daxc [-xiqUIPSZOCKTv] [filename]
....

If `filename` is given the commands in the file will be executed as
though they were received through `stdin`. `daxc` will also act
correctly if a _shebang_ is used for the file. So the file can also be
marked as executable and `daxc` will act as expected. Blank lines and
lines that start with ’#’ are ignored.

daxc Command Line Options

- The execute options should be followed by a command that is to be
executed by `daxc`.

- When the module is started with the -f or -x options the default
behavior of the module is to exit when finished with those commands. If
this option is used the program will enter interactive mode after those
commands are issued.

- Suppresses some output of the program while it is executing a file or
a command line option. It does nothing for interactive mode. This is
useful for running the module from shell scripts.

=== Commands

==== list

The _list_ command lists information about tags and datatypes. If the
command is given no arguments it will simply list all of the tags in the
system. If followed by the subcommand _type_ it will list all of the
compound data types that are configured in the currently running system.
If _type_ is followed by the name of one of those compound data types it
will list the members of the cdt and their data type.

==== cdt

....
    Usage:
    daxc>cdt name m1name m1type m1count [m2name] [m2type] [m2count] [...]
....

The _cdt_ command is used to create a compound data type. The command
should be followed by the name of the new data type and then as many
member triplicates as are needed to define the type. The triplicates
include the name of the cdt member the datatype of that member and the
count for the member. For example...

....
    daxc>cdt newType myInt INT 1 myDint DINT 10 myBool BOOL 32
....

This would create a new compound datatype with three members. The first
member a single INT named myInt the second an array of 10 DINT’s named
myDint and the last one is an array of 32 BOOLs named myBool.

You can put as many triplicates after the name as needed to define the
cdt. The cdt cannot be redefined, once it is created that’s it. It’ll be
possible to delete unused types at some point but that feature is not
yet implemented.

==== add

....
    Usage:
    daxc>add tagname type count
....

Adds a tag to the system. The command should be followed by the name of
the new tag, the data type of the new tag and the count for the size of
the tag.

==== read

....
    Usage:
    daxc>read tagname [count]
....

The read command should be followed by the tag that is to be read. The
count argument can be given if only a subset of the tags are to be read.

==== write

....
    Usage:
    daxc>write tagname value 1 [value2] [...]
....

==== db

....
    Usage:
    daxc>db tagname [count]
....

==== help

....
    Usage:
    daxc>help [command]
....

The _help_ command followed by the name of another command will list
information about using that command. Otherwise it simply prints a list
of commands that help is available on.

==== exit

....
    Usage:
    daxc>exit
....

The _exit_ command simply exits the daxc module.

== Modbus Communications Module

include::modbus.asciidoc[]

== PLCTag Communication Module

include::plctag.asciidoc[]

== Lua Scripting Module

include::daxlua.asciidoc[]

== MQTT Module

include::mqtt.asciidoc[]

