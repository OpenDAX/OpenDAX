The MQTT Client module allows the user to connect to an MQTT broker and
associate tags with topics.

tags can be associated with either a publisher or a subscriber and Lua
functions are used to filter the data from the broker to the tags. These
filtering functions have the ability to add, read and write tags so the
mechanism is very powerful.

=== Subscriptions

Subscriptions can subscribe to any topic that is allowed by MQTT.
Wildcards can be used. The actual topic that is received will be passed
to the filtering function that is configured for the subscription so the
filtering function can make decisions based on the actual received
topic.

The filtering functions have the ability to create, read and write any
tag, regardless of whether they are configured along with the
subscription. Tags that are configured in the subscription are more
efficient because a buffer is pre-allocated to hold the data and the tag
handles.

If no tags are associated with the subscription then itâ€™s assumed that
the filtering function will write the tag data to the server. It is not
required that the filtering function write any data to the tag server.
It may be that the filtering function decides based on the data to make
no changes or the filtering function may do nothing other than write the
data to the message logger with the Lua `print`footnote:[The print
function is overridden by the module and will pass the given string to
the message logger with the topic of ERR_LOGIC] function.

When a filtering function and tags are assigned, the module expects the
filtering function to return values that will then be converted and
assigned to the tags. It is important that the function return the
proper type and number of values that match the configured tags.
Warnings will be written to the message logger if the number of tags
configured does not match the number of values returned.

If more than one tag is associated with the subscription then a tag data
group is used for the communication to the tag server. Otherwise, a
simple `tag_write` is used. Any tag can be associated with the
subscription including arrays and tags that have compound data types. If
subsets of arrays or parts of tags are to be written then a Lua
filtering function that directly writes the tags will have to be used.

The simplest (and fastest) filtering method happens when no filtering
function is specified. If no filterter is specified then a simple raw
copy of the MQTT message payload is copied to the tag. Byte ordering
issues are ignored and no attempt is made to check the data. This is
extremely fast but obviously not very flexible. Mirroring a set of tags
between two systems would be very efficient if done this way.

=== Publishing

Publishing is similar except that the filtering function should return a
single string that will be the data to be published. If tags are given
they will be read and passed to the filtering function. If no filtering
function is given then a raw copy of the tag data will be published to
the topic. At least one tag must be configured to use as a trigger. The
trigger is what causes the publication to happen. A specific trigger tag
can be given. This will be used to setup a regular dax event and hits on
that event will cause the publication. The type of trigger can also be
set and if necessary, a value for those event types that require a value
(i.e. Greater Than). The trigger tag need not be one of the tags that
will be part of the publication. If a trigger tag is not explicitly
configured then the first tag that is assigned to the publisher will be
the trigger. If not type is given then the WRITE event type will be
used. If no trigger tag is given and no tags are assigned, an error is
raised and the publisher will not be enabled.

The filtering function accepts two parameters, the topic name and the
tag values. If there is a single tag configured for the publisher then
the value of that tag will be passed to the function. If there are more
than one tag then an array of values corresponding to the tags will be
passed as the value. If not tags are configured nil will be passed. It
is expected that the filtering function will return a string. The string
can be a binary string that contains zeros. The `struct.pack` function
may be very useful here. Also the `string.filter` function.
