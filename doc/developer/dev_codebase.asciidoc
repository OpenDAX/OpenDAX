== Codebase Descriptions

This section describes the different files and directories that are part
of the OpenDAX core programs. This includes the master daemon, the
server and the library. This is meant as a rough overview to get a feel
for how the code is laid out. It is not meant to be an exhaustive
reference. For that you’ll just have to go take a look at the latest
code in the repository. As a module developer you may not need any of
this information, but since OpenDAX is such a young program there will
still be plenty of bugs to work out of the core system, and this list
may help somebody to get into the core code and help out with debugging
or development.

All of the source code files are in the /src directory. Assume that all
of the following files and directories are within the /src directory.

_config.h_ This file is generated by ./configure and contains the
architecture dependent defines that tell us things like what functions
are available and what header files we need to install. I’m actually
checking for quite a few functions that I don’t really do anything about
if they are missing. As incompatibilities come up these will have to be
dealt with.

_common.h_

This header includes config.h as well as some other headers that are
popular. It also has some definitions and macros that will be used
throughout the system. This file should be included in just about every
source code file in the system.

_opendax.h_

This is the header that describes the public interface to the OpenDAX
library. It contains declarations for all of the public library
functions as well as the precompiler definitions for the data types,
error codes, configuration flags etc. This file should be included by
all modules that will link to the library, and is included in most of
the source code files in the rest of the system too. This should be the
only header file from this distribution that would need to be included
in any module code. If there are others then we did something wrong in
the interface.

_libcommon.h_

This header file contains definitions and macros that are needed by both
the server and the module library.

_/master_

The master directory contains the source for the master daemon. This
program is responsible for managing all of the other programs that are
part of the OpenDAX system.

_/master/master.c_

Contains the main() function and starts the system.

_/master/daemon.c_

This is the code that handles sending the program to the background.

_/master/mstr_config.c_

The main configuration code is in this file. It uses a very similar
setup as the module library in that, it uses Lua to read configuration
files.

_/master/process.c_

Contains the process starting and stopping code as well as any other
code that is responsible for dealing with the processes that are
running.

_/master/logger.c_

logger.c contains the code to deal with logging messages to the console,
syslog or whatever other logging mechanism we decide to use.

_/master/cpu.c_

Code for getting the cpu usage and status from running processes.

_/master/pipes.c_

Pipes are set up between the running processes and the master daemon.
These pipes are the mechanism that modules use to log messages as well
as a way for the master daemon to monitor when the modules have started.
There is a separate thread that runs to deal with this and the code for
that thread as well as any support functions are in this file.

_/server_

The dax directory contains the source for the OpenDAX server.

_/server/daxtypes.h_

This contains the private type definitions that are used internally by
the server. These definitions should not be used by any module or the
library.

_/server/server.c_

Contains main() and the other functions necessary to start the server
and spawn the threads that do all the work. It all starts here.

_/server/func.c_

Contains a few generic functions for common operations like memory
allocation and such.

_/server/module.c_

Contains the code for the module handling system in the server.
Operations such as starting and stopping modules as well as module
registration and any other operation that involves modules should be in
this file. The module.h header contains the public interface definitions
for the functions in this file.

_/server/message.c_

This file contains the functions that handle the module<->server
messaging. Very little actual work gets done here other than sending and
receiving data on the sockets and determining which functions in other
files should be called.

_/server/buffer.c_

Contains buffering code for the messaging subsystem. The messaging
system writes the data from each socket into these buffers until it
figures out that it has an entire message from one of the modules then
it calls the function to deal with that message.

_/server/options.c_

Contains the code for reading the configuration from the configuration
file and the command line.

_/server/tagbase.c_

The storage and manipulation of all the real time tag information is
contained within this file. For now the custom datatype handling code is
also in here but this may get moved to it’s own file.

_/lib_

The lib directory contains the source for the library. We use libtool to
sort out the compatibility issues associated with the way different
systems handle shared libraries. If no shared libary system will work
then libtool makes this a static library.

_/lib/libdax.h_

This header file contains all of the private definitions, macros and
declarations that are needed throughout the library code but are not
needed in the server or the modules.

_/lib/libfunc.c_

Contains some generic functions that are useful throughout.

_/lib/libmsg.c_

This is all the messaging code for the library. There are functions in
this file for sending and retrieving messages and determining what to do
with them. The functions here closely resemble functions in
/dax/message.c and typically changes in one of thse files requires
changes in the other. Between the two of them they define the
communications protocol.

_/lib/data.c_

This file deals with library side of the tag data. It is probably not
named well and may change. The functions here resemble functions that
are in /dax/tagname.c

_/lib/libconv.c_

This file contains the functions for making sure that the data
formatting is the same as the server. The way that OpenDAX handles
different byte ordering and data formating between architectures over
the network is that the server stores the data in whatever way the
server wants and the library is responsible for determining if the data
needs to be converted and how. This file contains the code for that.

_/lib/libcdt.c_

OpenDAX allows the creation of custom data types. This file contains the
code to handle all of that.

_/lib/libopt.c_

Contains the functions for configuring the module. The entire
configuration system of OpenDAX uses Lua as the configuration
programming language. The modules can be configured by either the main
opendax.conf file, their own configuration file, the command line or any
combination of the above. There are also some configuration options that
are common between modules. This file contains the code to handle all of
that.

_/modules_

This directory contains the module code. We will not discuss the module
details here.

_/etc_

The sample configuration files are located here.
