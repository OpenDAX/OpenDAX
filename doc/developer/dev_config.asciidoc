== Initialization and Configuration

=== Initialization

The first thing that any module will have to do is allocate and
initialize a `dax_state` object. This is simply a matter of calling the
`dax_init()` function. For example see the following code.

....
dax_state *ds;

ds = dax_init("MyModule");
if(ds == NULL) exit(-1);
....

First we declare a pointer to a `dax_state` object. This is an opaque
pointer that your program will need to maintain for it’s entire
lifetime. It represents a single connection to a single
server.footnote:[Modules may connect to multiple servers but they will
need to maintain multiple dax_state objects and configurations.]

Once the pointer is declared we use the `dax_init()` function to
allocate it and initialize it. The only real error that this function
can have is memory allocation failure, in which case it will return
NULL. Your module should probably log an error an exit gracefully. The
string that is passed to `dax_init()` is the name of your module as it
will be seen throughout the system. It can be overridden by names
gathered during the configuration process. We’ll talk about this later.

=== Configuration

The second thing that the module code should do is read it’s
configuration. It is important to note that the module will have to read
some configuration even if the module itself does not have any
configurable options. This is because the libdax library will need some
configuration information to help it know how to communicate with the
server.

There are two methods for the module to receive configuration
information. A configuration file may or may not exist for each program
or arguments can be passed via the command line.

If a configuration attribute is present on the command line it will take
precedence over that same attribute given in the configuration files. An
exception to this is the logging configuration. Once logging services
are added via the configuration file those services will determine how
messages are logged and anything passed on the command line will be
ignored.

Configuration files are Lua scripts which makes the configuraiton system
in OpenDAX very powerful. It allows configuration files to import and
excecute other Lua configuration files. This gives the user a way to set
up universal configuration options that are common accross the entire
system. It also allows the configuration to include variables, loops and
conditions that add a lot of power to configuration.

Basic configuration is made up of attributes. An example of an attribute
would be the name of the local unix domain socket that the module should
use to communicate to the server. The attribute name might be
`socketname` and the value `/tmp/opendax`footnote:[In fact these are the
defaults for the local socket configuration]. There are many attributes
that are built into the system that will always need to be configured.
These are necessary for the basic functionality. The `socketname`
attribute is just one example. The module developer can add as many
attributes as are needed for configuring the functionality of the given
module. The libdax library contains interfaces to help the module
developer with all of this.

If the configuration data is more complex than simply assigning a value
to an attribute there is a callback function mechanism built into the
configuration system. Since the configuration files in OpenDAX are
nothing more than Lua scripts. The libdax library gives the module
programmer the ability to create functions that can be called from the
script. These functions are programmed in the module code just like any
other Lua extension function. The full description of how to write Lua
extension functions is beyond the scope of this book, but we will give
some simple examples that would help with basic configuration.

==== Creating Attributes

Attributes are the names that are given the different options that you
can create in an OpenDAX configuration. For instance, your _fooserial_
module will need to know what serial port to use, what baud rate to use
and the communications settings it will need. These would be attributes
that you would like for the libdax library configuration system to find
for you.

To add and attribute to the configuration state we use the
`dax_add_attribute()` function. Here is the prototype.

....
int dax_add_attribute(dax_state *ds, char *name, char *longopt,
                      char shortopt, int flags, char *defvalue);
....

The _name_ argument is the name that will be used for the attribute. It
would be the left side of the attribute assignment in the configuration
file. For instance if we use `"baudrate"` for our attribute name the
configuration file might look like…

....
baudrate = 9600
....

The _longopt_ argument is the long name of command line argument that
would represent this attribute. If we use `"baud-rate"` for _longopt_
then we might set the baud rate by the following command…

....
 $ fooserial --baud-rate=9600 
....

_shortopt_ argument is a single character that works just like
__longopt__footnote:[For more information on how these two types of
command line options work, refer to the documentation for the _getopt_
library.]

The _defvalue_ argument is the default value that will be assigned to
this attribute if it is not set by any of the three configuration
mechanisms.

The _flags_ argument is a bitwise OR | of the following definitions …

[cols="<,<",options="header",]
|===
|`CFG_ARG_NONE` |No Arguments
|`CFG_ARG_REQUIRED` |Argument is required
|`CFG_ARG_OPTIONAL` |Argument is optional
|`CFG_CMDLINE` |Parse Command line
|`CFG_MODCONF` |Parse [module].conf file
|`CFG_NO_VALUE` |Don’t store a value, only call callback
|===

The first three flags correspond to the _getopt_ library’s usage of
command line arguments. If there should be no arguments to the attribute
then `CFG_ARG_NONE` should be used. This would come in handy if the
argument is simply a flag of some kind. The -V option to many programs
simply cause the program to print it’s Version number and exit, is one
example of an option that would take no arguments.

If an argument is required the flag `CFG_ARG_REQUIRED` should be used.
The baud rate option in the above example would be pretty meaningless
without a number of some kind to use as the baud rate.

The `CFG_ARG_OPTIONAL` flag is used for an attribute that doesn’t need
an argument but where one might make sense. A verbosity option when used
alone might simply increase the verbosity of the programs output
slightly but passing a numerical argument would increase the verbosity
by that amount.

The next three flags, `CFG_CMDLINE` and `CFG_MODCONF` have to do with
which of the two configuration sources this particular attribute could
be found. It may make sense to search for an attribute on the command
line, and/or in our _fooserial.conf_ configuration file. In this case we
would put both values in our _flags_ argument. It may however only make
sense to see command line options. In this case we would simply use
`CFG_CMDLINE`.

The final flag,`CFG_NO_VALUE` can also be OR’d with the others. This is
used in the special case where we are not actually interested in any
value that might be passed to the attribute in a configuration file. The
configuration system has the ability to call a callback function when
attributes are set in configuration files. If this callback function is
the only thing that we are interested in, we can use this flag to save a
little memory.

There are some attributes that are predefined for use by the libdax
library. You cannot use any of the names, long options or short options
of these attributes. These are listed in the following table.

[cols="<,<,^",options="header",]
|===
|*name* |*longopt* |*shortopt*
|socketname |socketname |`U`
|serverip |serverip |`I`
|serverport |serverport |`P`
|server |server |`S`
|name |name |`N`
|cachesize |cachesize |`Z`
|msgtimeout |msgtimeout |`O`
|logtopics |logtopics |`T`
|verbose |verbose |`v`
|config |config |`C`
|confdir |confdir |`K`
|===

If your module tries to use any of these names or options the
`dax_add_attribute()` function will return an error. This list is also
subject to change. If you want to know the absolute latest version of
this list see the _/lib/libopt.c_ source code file in the distribution.

==== Creating Callbacks

....
int dax_attr_callback(dax_state *ds, char *name,
                      int (*attr_callback)(char *name, char *value));
....

The `dax_attr_callback()` function is used to add a callback function to
the configuration system that will be called when this attribute is set.

{empty}[[Still working on this]]

==== Writing Lua Functions

....
int dax_set_luafunction(dax_state *ds, int (*f)(void *L), char *name);
....

The `dax_set_luafunction()` function is used to set a function that can
be called from your module configuration script. This gives your module
a lot of power in how it is configured. A full explanation of writing
Lua functions is beyond the scope of this book. Review the Lua
documentation for more information.

{empty}[[Still working on this]]

==== Running the Configuration

To execute the configuration use the following function …

....
int dax_configure(dax_state *ds, int argc, char **argv, int flags);
....

The `dax_configure()` function will run the configuration. You pass this
function the _argc_ and _argv_ variables that were passed to your module
in `main()`.

The _flags_ argument is a bitwise OR of `CFG_CMDLINE` or `CFG_MODCONF`.
These do just what you would think they would do. Depending on which of
these flags that you set the corresponding configuration mechanism will
be used. To cause the module to only read from the command line you
would simply set the `CFG_CMDLINE` flag. If you want the configuration
file to be run you would set `CFG_MODCONF` as well.

It’s unusual to not use the command line but it’s not uncommon to use
only the command line.footnote:[The `daxc` command line client module
does not read a configuration file.] Most modules will want the full
power of the Lua configuration engine and since the name and or location
of that file can change with options on the command line it makes sense
to do both in that situation.

==== Retrieving Attributes

Once we have run the configuration we use the `dax_get_attr()` function
to retrieve the values that were set.

....
char *dax_get_attr(dax_state *ds, char *name);
....

This is a very simple function that takes the _name_ of the attribute
that you want and returns a pointer to the string. This string is
allocated within the `dax_state` object and should not be modified. If
your module needs to store this string for later use you should make a
copy of itfootnote:[The `strdup()` function works well for this]. The
pointer will point to invalid information after the configuration has
been freed. We’ll discuss freeing the configuration shortly.

==== Setting Attributes

Setting attributes manually gives the module programmer more power over
how the configuration gets done. One example might be that your module
would like to just receive the name of a configuration file on the
command line. It could read it’s own arguments to find that filename,
pass it to `config` and then run the configuration with only the
configuration file. The `dax_set_attr()` function is used to set those
attribute values outside of the configuration system.

....
int dax_set_attr(dax_state *ds, char *name, char *value);
....

The prototype should be pretty self explanatory. The _name_ argument
should point to the name of the attribute you want to set and _value_
should point to the value that you want the attribute to take.

It is important to note that any callbacks that are associated with this
attribute will be called as well. This may have some usefulness. Most
modules will not need to set attribute values.

==== Finishing Up

Once we are done with the configuration we can use the
`dax_free_config()` function to free the configuration memory.

....
int dax_free_config(dax_state *ds)
....

This function simply takes a pointer to the `dax_state` object and frees
the data associated with the configuration. There are a lot of strings
that are maintained by the configuration system in the library and this
is nothing more than a way to free up that memory. If your module will
need access to these configuration options and you don’t want to make
copies then you do not need to call this function.

After calling this function any strings that you received from
`dax_get_attr()` will no longer be valid, so you don’t want to reference
those pointers any longer.

=== Module Connection

Before we can communicate to the server we must create a connection.

There are two functions that deal with module registration.

....
int dax_connect(dax_state *ds)
int dax_disconnect(dax_state *ds)
....

The `dax_connect()` function makes the initial connection to the server,
identifies the module to the server and takes care of any other
initialization issues that need to be handled. Once the module has
successfully connected it can begin doing it’s job.

It may be important to note that the `dax_connect()` function creates
and runs a thread that will always be in the background handling the
communications to the server.

`dax_connect()` returns 0 on success and an error code on failure.

The `dax_disconnect()` function informs the server that we are through
and closes the connection.

The `dax_connect()` can be called again after the module has been
disconnected. If the module determines that there are communication
errors it could re-establish communications in this way.
