--This is the configuration file for the OpenDAX Lua interpreter module
--It is basically a Lua script itself

dofile(configdir .. "/common.conf")

verbosity = 10 --needs to change to the new way

broker_ip = "192.168.1.157"
-- broker_port = 1883
-- broker_timeout = 10
clientid = "OpenDAX"
-- username = "uname"
-- password = "pword"

-- Simple subscriptions
s = {}
s.topic = "dax_topic_1"
s.tagname = "tag_1"
s.type = RAW    -- Message should contain raw binary tag data
s.qos = 0
add_sub(s)

s.topic = "dax_topic_2"
s.tagname = "tag_3"
add_sub(s)

s.topic = "dax_topic_3"
s.tagname = "tag_3"
s.type = STR   -- Message contains a string that represents the value
add_sub(s)


-- Simple Producers

p = {}
p.topic = "dax_topic_4"
p.tagname = "tag_4"
p.format = "[4321]" -- four bytes big endian format
p.type = RAW      -- send as raw binary data
p.update = WRITE  -- send on tag's write event
p.qos = 1

add_pub(p)

p.topic = "dax_topic_5"
p.tagname = "tag_5"
p.type = STR      -- send as a string
p.format = "%.2f" -- printf type string formatting
p.update = WRITE  -- send on tag's write event

add_pub(p)

p.topic = "dax_topic_5"
p.tagname = "tag_5"
p.update = CHANGE  -- send on tag's change event

add_pub(p)

p.topic = "dax_topic_5"
p.tagname = "tag_5"
-- if .update is a string then it's assumed to be an OpenDAX
-- tag.  The message will be sent when this tags change events
-- is fired
p.update = "tag_5_update"

add_pub(p)



-- Complex subscriptions example
s = {}

s.topic = "dax_topic_10"       -- MQTT Topic name to subscribe to
s.tagnames = {"tag_10", "tag_11"}  -- OpenDAX tagnames in an array

-- There are three ways to read the value
-- Assumes that the data is the binary representation of the number
s.type = RAW
s.format = "[4321][4321]" -- 4 bytes Big endian format

-- The received data is a string which we'll parse with scanf type formatting
-- s.type = STR
-- s.format = "tag1=%f,tag2=%f"  -- A scanf() type format string

-- The received data is a string that we'll parse with a regular expression
-- Each match is assumed to be the next tag`
-- s.type = RE
-- s.format = "([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?),([-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?)"

-- To add the subscription we pass this table to the function
add_sub(s)



-- Complex Publishers example

p = {}

p.topic = "dax_topic_20"  -- MQTT Topic name to subscribe to
p.tagnames = {"tag_20", "tag_21"}  -- OpenDAX tagnames in an array
p.update_mode = 2           -- Multiple of the cycle time
-- p.update_mode = ANY_CHANGE  -- When any tag chagnes
-- p.update_mode = ANY_WRITE   -- When any tag is written to
-- p.update_mode = ALL_WRITE   -- When all the tags have been written since last send
p.update_mode = "tag_20_update" -- When the tag UpdateTag changes

-- There are two ways to write the values
-- Write the raw binary value
p.type = RAW
p.format = "[4321][4321]" -- 4 bytes Big endian format

-- Write a string with printf type formatting
-- p.type = STR
-- p.format = "%f,%f"  -- A printf() type format string

-- add_fpub(p)
