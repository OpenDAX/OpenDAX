-- Main configuration file for the OpenDAX master daemon

--Set to 'false' to run OpenDAX in the foreground
daemonize = false

pidfile = "/var/run/opendax.pid"

--not really used anymore
verbosity = 10

--logger = "syslog"      --Always log to syslogd
--logger = "console"     --Always log to stdout
logger = "auto"          --log to syslogd when running in background or stdout otherwise

--These are some definitions that we reuse throughout the file
prefix = "/usr/local/"
binprefix = prefix .. "bin/"
confprefix = prefix .. "etc/opendax/"
user  = "opendax"
group = "opendax"

--We only run this part when it's the master daemon configuration call
if calling_module == "opendax" then

end

-- Each of the following tables represents a process that we want to start
-- and monitor.
--
--    name    = The name used to identify the process.  Used mostly for logging
--    restart = [true|false] - if true the master will restart the process if it fails
--    path    = The path to the executable.
--    args    = A string that represents the arguments to be passed
--    user    = User that the process will run under.  If not set the master's uid will be used.
--    group   = Group that the process will run under  If not set the master's gid will be used.
--    env     = Environment Variable String.  If not set the master's environement will be used.
--    delay   = The amount of time that the master will wait for the process to start in mSec.
--   *cpu     = CPU usage threshold (0-1).  If the module's CPU usage averages higher than this then
--              the master will kill it.  If restart is enabled it will attempt a restart.  If
--              not set or set to zero the feature will be ignored.
--   *mem     = Memory usage threshold (kB).  If the modules memory usage surpassees this value then
--              the master will kill it.  If restart is enabled it will attempt a restart.  If
--              not set or set to zero the feature will be ignored.
--
--    * = Currently not implemented.

server = {}

server.name     = "tagserver"
server.restart  = true
server.path     = binprefix.."tagserver"
server.args     = "-C " .. confprefix .."tagserver.conf"
server.user     = user
server.group    = group
server.delay    = 1000
server.cpu      = 0.1
server.mem      = 2000

modbus = {}
    
modbus.name      = "modbus"
modbus.restart   = true
modbus.path      = binprefix.."modbus"
modbus.args      = "-C " .. confprefix .."modbus.conf"
modbus.user      = user
modbus.group     = group
modbus.delay     = 0
modbus.cpu       = 0.1
modbus.mem       = 2000

test = {}
    
test.name      = "test"
test.restart   = false
test.path      = binprefix.."test"
test.args      = "-C " .. confprefix .."test.conf"
test.user      = user
test.group     = group
test.delay     = 10000
test.cpu       = 0.5
test.mem       = 5000

lua = {}
    
lua.name      = "lua"
lua.restart   = true
lua.path      = binprefix.."daxlua"
lua.args      = "-C " .. confprefix .."daxlua.conf"
lua.user      = user
lua.group     = group
lua.delay     = 1000
lua.cpu       = 0.1
lua.mem       = 2000


skel = {}
    
skel.name      = "skel"
skel.restart   = true
skel.path      = binprefix.."skel"
skel.args      = "-C " .. confprefix .."skel.conf"
skel.user      = user
skel.group     = group
skel.delay     = 1000
skel.cpu       = 0.1
skel.mem       = 2000

badmodule = {}

badmodule.name           = "badmodule"
badmodule.restart        = true
badmodule.path           = binprefix.."badmodule"
badmodule.args           = "-C " .. confprefix .."badmodule.conf"
badmodule.user           = user
badmodule.group          = group
badmodule.delay          = 1000
badmodule.cpu            = 0.1
badmodule.mem            = 2000


-- Uncomment the processes that are to be started.

add_process(server)
--add_process(modbus)
add_process(test)
--add_process(lua)
--add_process(skel)
--add_process(arduino)
--add_process(badmodule)
