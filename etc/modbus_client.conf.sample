-- modbus_client.conf

-- Configuration file for OpenDAX Modbus module

-- Import external configurations
dofile(configdir .. "/log.conf")
--dofile(configdir .. "/common.conf")

function init_hook()
    tag_add("modbus_inputs", "UINT", 20)       -- holding registers
    tag_add("modbus_holding", "UINT", 20)      -- input registers
    tag_add("modbus_coils", "BOOL", 100)      -- coils
    tag_add("modbus_discretes", "BOOL", 100)  -- discretes
    tag_add("send_trigger", "BOOL", 1)
end

p = {}

p.name = "sample_client"
p.enable = true         -- enable port
p.protocol = "TCP"      -- RTU, ASCII, TCP
p.type = "CLIENT"       -- modbus TCP Client

--p.socket = "UDP"      -- IP socket protocol to use TCP or UDP

-- General Configuration
p.scanrate = 1000     -- rate at which this port is scanned in mSec
p.timeout = 1000      -- timeout period in mSec for response from slave
p.frame = 30          -- frame time for the interbyte timeout
p.delay = 0           -- delay between response and the next request
p.retries = 2         -- number of times to retry the command
p.maxfailures = 20    -- total number of consecutive timeouts before the port is restarted
p.inhibit = 10        -- number of seconds to wait until a restart is tried
p.persist = true      -- if set to false the connection will be closed after each scan.

portid = add_port(p)

if portid then
  c = {}
  c.enable = true
  c.mode = "CONTINUOUS"
  c.ipaddress = "127.0.0.1"
  -- c.port = 502
  c.node = 1
  c.fcode = 4
  c.register = 0
  c.length = 8
  c.tagname = "modbus_inputs"
  c.tagcount = 8
  c.interval = 1

  add_command(portid, c)

  c = {}
  c.enable = true
  c.mode = "CONTINUOUS"
  c.ipaddress = "127.0.0.1"
  -- c.port = 502
  c.node = 1
  c.fcode = 3
  c.register = 0
  c.length = 16
  c.tagname = "modbus_holding"
  c.tagcount = 16
  c.interval = 1

  add_command(portid, c)

  c = {}
  c.enable = true
  c.mode = "CHANGE"
  c.ipaddress = "127.0.0.1"
  -- c.port = 502
  c.node = 1
  c.fcode = 16
  c.register = 16
  c.length = 4
  c.tagname = "modbus_holding[16]"
  c.tagcount = 4

  add_command(portid, c)

  c = {}
  c.enable = true
  c.mode = "TRIGGER"
  c.ipaddress = "127.0.0.1"
  -- c.port = 502
  c.node = 1
  c.fcode = 5
  c.register = 17
  c.tagname = "modbus_holding[17]"
  c.tagcount = 1
  c.trigger = "send_trigger"

  add_command(portid, c)
end
